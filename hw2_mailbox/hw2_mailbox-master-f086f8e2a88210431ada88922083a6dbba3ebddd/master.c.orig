#include "master.h"
#include <stdlib.h>
#include <sys/types.h>
#include <unistd.h>
#include <stdio.h>
#include <errno.h>
#include <signal.h>
#include <fcntl.h>
#include <dirent.h>
int globalVariable = 2;

int getname(char store[100][100],char*path);
void substr(char *dest, const char* src, unsigned int start,
                    unsigned int cnt);//find substring

int main(int argc, char **argv)
{
	int slavenumber=1;
	char * sIdentifier=malloc(100);
	int    iStackVariable = 20;
	int sysfs_fd = open("/sys/kernel/hw2/mailbox",O_RDWR);
	if(argc>=7) { //optional
		slavenumber = atoi(argv[6]);
	}
	char * dir=malloc(100);
	char * keyword=malloc(100);
	dir =  argv[4];
	keyword = argv[2];
	printf("infor: %s %s %d\n",keyword,dir,slavenumber);
//    pid_t pID = fork();
	pid_t child_pid,waitid;
	int i;
	for(i = 0; i<slavenumber; i++) {
		if ((child_pid= fork())== 0) { // child
			// Code only executed by child process
			sleep(1);
			execl("/home/user/hw2_mailbox/slave","/home/user/hw2_mailbox/slave",NULL);
			sIdentifier = "Child Process: ";
			printf("childpid:%d  ",child_pid);
			globalVariable++;
			iStackVariable++;
			printf("%s  ",sIdentifier);
			printf("Global variable %d  ",globalVariable);
			printf("Stack variable %d  ",iStackVariable);
			while(1);
			exit(0);
		} else if (child_pid < 0) { // failed to fork
			printf("Failed to fork\n");
			exit(1);
			// Throw exception
		}

	}


	// Code only executed by parent process

	//	printf("\n%s %d\n",sIdentifier,child_pid);
//	printf("Global variable %d\n",globalVariable);
//	printf("Stack variable %d\n",iStackVariable);
	errno = 0;


	char *buf = (char*)malloc(100);
	/*    buf = "apple-/home/user/hw2_mailbox/test1.txt+";
	    write(sysfs_fd,buf,100);
	    buf = "boy-/home/user/hw2_mailbox/test2.txt+";
	    write(sysfs_fd,buf,100);
	    buf = "cat-/home/user/hw2_mailbox/test3.txt+";
	    write(sysfs_fd,buf,100);*/
	buf = "/home/user/hw2_mailbox/text/";//store file directionary

	//getfilename
	char file[100][100];
	int filecount=getname(file,buf);
	int n = 0;

	for(n=0; n<filecount; n++) {
		printf("file: %s \n",file[n]);
	}
	//store in mailbox_t
	for(n=0; n<filecount; n++) {
		struct mail_t *mail = malloc(sizeof(struct mail_t)) ;
		sprintf(mail->data.query_word, keyword);
		sprintf(mail->file_path, file[n]);
		int a = send_to_fd(sysfs_fd,mail);
        printf("master write %d\n",a);
	}
	
    
    //killchild
	sleep(3);
	int  killReturn = killpg(getpgid(child_pid),
	                         SIGKILL);  // Kill child process group
	if(killReturn == -1) {
		if( errno == ESRCH) {    // pid does not exist
			printf("Group does not exist!\n");
		} else if( errno == EPERM) { // No permission to send signal
			printf("No permission to send signal!\n");

		} else
			printf("Signal sent. All Ok!\n");


	}
}

int getname(char store[100][100],char*path)//find file name in directionary
{
	DIR *d;
	struct dirent *dir;
	char filename[100];
	sprintf(filename,path);
	d = opendir(filename);
	int index=0;
	int count=0;
	if (d) {
		while ((dir = readdir(d)) != NULL) {
			char *temp = malloc(200);
			// concat path/ with 1.txt => path/1.txt
			sprintf(temp,path);
			sprintf(store[index],dir->d_name);
			strcat(temp,store[index]);
			sprintf(store[index++],temp);
			//     printf("%s\n",dir->d_name);
			count++;//前兩個是. and ..（測試結果）

			if(count<=2)index=0;
		}
		closedir(d);
	} else printf("ERROR");
//    printf("index:%d\n",index);
	return index;


}


int send_to_fd(int sysfs_fd, struct mail_t *mail)
{
	//set as key-path+
	char *buf =malloc(200);
	sprintf(buf,mail->data.query_word);
	strcat(buf,"-");
	strcat(buf,mail->file_path);
	strcat(buf,"+");
//	printf("write: %s\n",buf);
	int ret_val = write(sysfs_fd,buf,100);
//	if (ret_val == ERR_FULL) {

//	} else {

//	}
}


int receive_from_fd(int sysfs_fd, struct mail_t *mail)
{
char *infor = malloc(100);
    int ret_val = read(sysfs_fd,infor,100);
        close(sysfs_fd);
            sysfs_fd = open("/sys/kernel/hw2/mailbox",O_RDWR);

                int i =0;
                    while(infor[i]!='-') { //find keyword
                                i++;
                                    }
                        substr(mail->data.query_word,infor,0,i);//XXXXX-
                            int j=0;
                                while(infor[j]!='+') { //find path
                                            j++;
                                                }
                                    substr(mail->file_path,infor,i+1,j-i-1);//-XXXXX+ count = j-i-1


/*
	if (ret_val == ERR_EMPTY) {

	} else {

	}*/


}
void substr(char *dest, const char* src, unsigned int start, unsigned int cnt)
{
        strncpy(dest, src + start, cnt);
            dest[cnt] = 0;
}


